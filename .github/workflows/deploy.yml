name: deployment
on:
  push:
    # push到主分支启用CD，根据实际情况更改
    branches: [online]

jobs:
  deploy-app:
    runs-on: ubuntu-latest
    # 后续step(非远程机器)可以通过${{env.xxx}}或者$xxx引用，否则通过 ${{vars.xx}} 或者 ${{secrets.xx}}，可选
    env:
      APP_NAME: comfyui-online-serverless
    steps:
      # 拉取main分支代码
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set github_env
        run: echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
      # 制作docker镜像并推送到镜像服务
      - name: Build and push docker image
        run: |
          ls -alth
          curl -H "Authorization: token ${{ secrets.PAT }}" -o .env https://raw.githubusercontent.com/CavinHuang/envs/refs/heads/main/comfyui-nodes-docs-site/prod/.env
          # 读取文件并过滤掉注释和空行
          while IFS= read -r line; do
            # 跳过空行和注释行
            if [[ -n "$line" && ! "$line" =~ ^[[:space:]]*# ]]; then
              # 将变量添加到 GITHUB_ENV
              echo "$line" >> $GITHUB_ENV
            fi
          done < .env
      - name: Set env
        run: |
          # 将REGISTRY_REPO添加到GITHUB_ENV，后续通过$xxx引用
          echo "REGISTRY_REPO=${DOCKER_REGISTRY_MIRROR}/${DOCKER_REGISTRY_NAMESPACE}/${APP_NAME}" >> $GITHUB_ENV
          echo "APP_NAME=${APP_NAME}" >> $GITHUB_ENV

      - name: Check env & build
        run: |
          echo "Checking environment variables:"
          echo "NEXT_PUBLIC_APP_URL: ${{ env.NEXT_PUBLIC_APP_URL }}"
          echo "NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}"

          echo ${DOCKER_REGISTRY_PASSWORD} | docker login ${DOCKER_REGISTRY_MIRROR} --username ${DOCKER_REGISTRY_USER} --password-stdin
          # 部分项目编译时需要环境变量 comfyui-nodes-docs-site/prod/.env
          # 构建镜像
          docker image build -f builder/Dockerfile -t ${APP_NAME} -t ${APP_NAME}:${{ env.GITHUB_SHA_SHORT }} -t $REGISTRY_REPO -t $REGISTRY_REPO:${{ env.GITHUB_SHA_SHORT }} .
          # 推送镜像
          docker push --all-tags $REGISTRY_REPO
          docker logout
      # https://github.com/marketplace/actions/ssh-remote-commands
      # 远程机器自动部署，因为是远程机器，所以这里环境变量需要重新设置
      - name: deploy
        uses: appleboy/ssh-action@v1.0.3
        env:
          DIR_APP: /projects/repo/${{ env.APP_NAME }}
        with:
          host: ${{ vars.HOST }}
          username: ${{ vars.USER }}
          key: ${{ secrets.KEY }}
          # 通过在env声明+envs export，后续可以直接$xxx调用；后续亦可继续使用 ${{vars.xxx}} 和 ${{secrets.xxx}}
          envs: DIR_APP
          script: |
            mkdir -p ${DIR_APP} && cd ${DIR_APP}
            echo -e "setup ${env.APP_NAME} from ${env.REGISTRY_REPO}"
            echo ${env.DOCKER_REGISTRY_PASSWORD} | docker login ${env.DOCKER_REGISTRY_MIRROR} --username ${env.DOCKER_REGISTRY_USER} --password-stdin
            # 清理已存在的容器和镜像
            docker rm -f ${env.APP_NAME} && docker rmi ${env.REGISTRY_REPO}:latest
            # 同步环境变量
            curl -H "Authorization: token ${{ secrets.PAT }}" -o .env https://raw.githubusercontent.com/CavinHuang/envs/refs/heads/main/${env.APP_NAME}/prod/.env
            # 冒号前为暴露端口，注意和nginx配置匹配
            # docker run -d --restart=always -p 3000:3000 --env-file .env --name ${APP_NAME} ${REGISTRY_REPO}
            docker run -d --restart=always -p 8188:8188 --name ${env.APP_NAME} ${env.REGISTRY_REPO}
            docker logout