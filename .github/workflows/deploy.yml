name: deployment
on:

  workflow_dispatch:
    inputs:
      CUSTOM_NODES_REPO:
        type: string
        description: "Custom nodes repository"
        required: true
      CUSTOM_NODES_DIR:
        type: string
        description: "Custom nodes directory"
        required: true

  # push:
  #   # push到主分支启用CD，根据实际情况更改
  #   branches: [online]
  #   paths-ignore:    # 添加忽略路径，避免不必要的构建
  #     - '**.md'
  #     - '.gitignore'
  #     - 'LICENSE'

jobs:
  deploy-app:
    timeout-minutes: 60  # 整个 job 的超时时间
    runs-on: ubuntu-latest

    # 后续step(非远程机器)可以通过${{env.xxx}}或者$xxx引用，否则通过 ${{vars.xx}} 或者 ${{secrets.xx}}，可选
    env:
      APP_NAME: comfyui-online-serverless
      DOCKER_CACHE_TAG: cache  # 添加缓存标签

    steps:
      # 拉取main分支代码
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1  # 优化克隆深度

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2  # 使用 Buildx 获得更好的构建性能

      - name: Load environment variables
        run: |
          # 下载并处理环境变量文件
          curl -sfL -H "Authorization: token ${{ secrets.PAT }}" \
            https://raw.githubusercontent.com/CavinHuang/envs/refs/heads/main/comfyui-nodes-docs-site/prod/.env > .env

          # 使用 grep 过滤注释和空行，更高效的处理
          grep -v '^#\|^$' .env >> $GITHUB_ENV

      - name: Set variables
        run: |
          echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
          echo "REGISTRY_REPO=${DOCKER_REGISTRY_MIRROR}/${DOCKER_REGISTRY_NAMESPACE}/${APP_NAME}" >> $GITHUB_ENV
          echo "CUSTOM_NODES_REPO=${{ github.event.inputs.CUSTOM_NODES_REPO }}" >> $GITHUB_ENV
          echo "CUSTOM_NODES_DIR=${{ github.event.inputs.CUSTOM_NODES_DIR }}" >> $GITHUB_ENV

      - name: Login to Docker Registry
        uses: docker/login-action@v2  # 使用官方 action 登录
        with:
          registry: ${{ env.DOCKER_REGISTRY_MIRROR }}
          username: ${{ env.DOCKER_REGISTRY_USER }}
          password: ${{ env.DOCKER_REGISTRY_PASSWORD }}

      # 制作docker镜像并推送到镜像服务
      - name: Build and push Docker image
        uses: docker/build-push-action@v4  # 使用官方 action 构建和推送
        with:
          context: .
          file: builder/Dockerfile
          push: true
          build-args: |
            CUSTOM_NODES_REPO=${{ env.CUSTOM_NODES_REPO }}
            CUSTOM_NODES_DIR=${{ env.CUSTOM_NODES_DIR }}
          tags: |
            ${{ env.REGISTRY_REPO }}:latest
            ${{ env.REGISTRY_REPO }}:${{ env.GITHUB_SHA_SHORT }}
          cache-from: type=registry,ref=${{ env.REGISTRY_REPO }}:${{ env.DOCKER_CACHE_TAG }}
          cache-to: type=registry,ref=${{ env.REGISTRY_REPO }}:${{ env.DOCKER_CACHE_TAG }},mode=max

      # https://github.com/marketplace/actions/ssh-remote-commands
      # 远程机器自动部署，因为是远程机器，所以这里环境变量需要重新设置
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        timeout-minutes: 30
        env:
          DIR_APP: /projects/repo/${{ env.APP_NAME }}
        with:
          host: ${{ vars.HOST }}
          username: ${{ vars.USER }}
          key: ${{ secrets.KEY }}
          # 通过在env声明+envs export，后续可以直接$xxx调用；后续亦可继续使用 ${{vars.xxx}} 和 ${{secrets.xxx}}
          envs: DIR_APP,APP_NAME,REGISTRY_REPO,DOCKER_REGISTRY_MIRROR,DOCKER_REGISTRY_USER,DOCKER_REGISTRY_PASSWORD
          script: |
            # 确保目录存在
            mkdir -p ${DIR_APP} && cd ${DIR_APP}

            # 使用函数优化重复代码
            cleanup_docker() {
              docker rm -f ${APP_NAME} || true
              docker rmi ${REGISTRY_REPO}:latest || true
            }

            # 登录 Docker
            echo ${DOCKER_REGISTRY_PASSWORD} | docker login ${DOCKER_REGISTRY_MIRROR} \
              --username ${DOCKER_REGISTRY_USER} --password-stdin

            # 清理和部署
            cleanup_docker

            # 使用 docker compose 或直接运行容器
            docker run -d \
              --restart=always \
              --name ${APP_NAME} \
              -p 8188:8188 \
              ${REGISTRY_REPO}:latest

            # 退出登录
            docker logout ${DOCKER_REGISTRY_MIRROR}